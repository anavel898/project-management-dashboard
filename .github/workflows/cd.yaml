name: CD workflow

on: 
  push:
  workflow_dispatch: 

jobs:
  linting-and-unit-tests:
    uses: ./.github/workflows/ci.yaml
    secrets: inherit

  build_and_check_ecs:
    runs-on: ubuntu-latest
    needs: [linting-and-unit-tests]
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    environment: 'image-build'
  
    steps:
      - uses: actions/checkout@v3
      - name: Build the Docker image
        id: build
        run: |
          TIMESTAMP=$(date +%s)
          TAG=project-management-dashboard:$TIMESTAMP
          docker build . --tag $TAG
          echo "image_tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Set up AWS credentials
      - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

      - name: Check ECS cluster
        id: check_cluster
        run: |
          CLUSTER_STATUS=$(aws ecs describe-clusters --clusters ${{ secrets.ECS_CLUSTER }} --query "clusters[0].status" --output text)
          if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
            echo "ECS cluster is not active"
            exit 1
          fi

      - name: Check ECS service
        id: check_service
        run: |
          SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }} --query "services[0].status" --output text)
          if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
            echo "ECS service is not active"
            exit 1
          fi
    
  push_image:
    runs-on: ubuntu-latest
    needs: build_and_check_ecs
    environment: 
      name: 'image-deployment'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Push Docker image to ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_URL }}
        docker tag ${{ needs.build_and_check.outputs.image_tag }} ${{ secrets.ECR_URL }}/project-manager-dashboard:$(date +%s)
        docker push ${{ secrets.ECR_URL }}/project-manager-dashboard:$(date +%s)